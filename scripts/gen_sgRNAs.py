#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
gen_sgRNAs.py generates sgRNAs as part of ExcisionFinder. Written in Python v 3.6.1.
Kathleen Keough 2018.

Usage:
    gen_sgRNAs.py <gens_file> <targ_file> <locus> <pams_dir> <ref_fasta> <out_dir> <cas_types> <guide_length>

Arguments:
    gens_file           Explicit genotypes file generated by get_chr_tables.sh for genome of interest.
    locus               Locus of interest in format chrom:start-stop
    pams_dir            Directory where pam locations in the reference genome are located. 
    ref_genome_fasta    Fasta file for reference genome used, e.g. hg38.
    out_dir             Directory in which to save the output files.
    cas_types           Cas types you would like to analyze, comma-separated (e.g. SpCas9,SaCas9).
    guide_length        Guide length, commonly 20 bp, comma-separated if different for different cas types.


Available cas types:
#CAS_LIST = [cpf1, SpCas9, SpCas9_VRER, SpCas9_EQR, SpCas9_VQR_1,
#           SpCas9_VQR_2, StCas9, StCas9_2, SaCas9, SaCas9_KKH, nmCas9, cjCas9] 
"""

import pandas as pd
import numpy as np
from docopt import docopt
import os
import crisprtools
from pyfaidx import Fasta

__version__ = '0.0.0'

# 3 and 5 prime cas lists

TP_CAS_LIST = ['SpCas9', 'SpCas9_VRER', 'SpCas9_EQR', 'SpCas9_VQR_1',
               'SpCas9_VQR_2', 'StCas9', 'StCas9_2', 'SaCas9', 'SaCas9_KKH', 'nmCas9', 'cjCas9']

FP_CAS_LIST = ['cpf1']

#CAS_LIST = ['cpf1', 'SpCas9', 'SpCas9_VRER', 'SpCas9_EQR', 'SpCas9_VQR_1',
 #           'SpCas9_VQR_2', 'StCas9', 'StCas9_2', 'SaCas9', 'SaCas9_KKH', 'nmCas9', 'cjCas9']


def het(genotype):
    gen1, gen2 = genotype.split('/')
    return gen1 != gen2

def get_range_upstream(pam_pos, pam_length, guide_length):
    """
    Get positions within specified sgRNA length bp upstream, i.e. for forward 3' PAMs or reverse 5' PAMs
    :param pam_pos: position of PAM, int.
    :return: sgRNA seed region positions, set of ints.
    """
    sgrna = list(range(pam_pos - guide_length - 1, pam_pos + pam_length))
    return sgrna


def get_range_downstream(pam_pos, pam_length, guide_length):
    """
    Get positions within specified sgRNA length bp downstream, i.e. for forward 3' PAMs or reverse 5' PAMs
    :param pam_pos: position of PAM, int.
    :return: sgRNA seed region positions, set of ints.
    """
    sgrna = list(range(pam_pos - pam_length, pam_pos + guide_length + 1))
    return sgrna


def makes_pam(chrom, pos, ref, alt, ref_genome):
    """
    Determine if cas in question makes a novel PAM site.
    :param chrom: chromosome, int.
    :param pos: position, int.
    :param ref: ref genotype, str.
    :param alt: alt genotype, str.
    :param ref_genome: reference genome fasta file eg ref_genome or hg38, fasta.
    :return:
    """
    makes_pam = [0] * len(CAS_LIST)

    if '<' in alt:
        return bool(makes_pam), [], []

    # if alt is not a special case (CNV or SV), continue checking the new sequence

    # ref_seq, alt_seq = get_alt_seq(chrom, pam_start, var_pos, ref, alt, guide_length, ref_genome, strand='positive')

    ref_seq = ref_genome['chr'+str(chrom)][pos - 11:pos + 10]

    if len(ref) > len(alt):  # handles deletions
        alt_seq = ref_genome['chr'+str(chrom)][pos - 11:pos - 1] + alt + ref_genome['chr'+str(chrom)][
                                                             pos + len(ref) + len(alt) - 3:pos + len(ref) + len(
                                                                 alt) - 3 + 10]
    else:
        alt_seq = ref_genome['chr'+str(chrom)][pos - 11:pos - 1] + alt + ref_genome['chr'+str(chrom)][
                                                             pos + len(alt) - 2:pos + len(alt) - 2 + 10]

    counter = -1
    for cas in CAS_LIST:
        # print(cas,ref,alt,pos)
        counter += 1
        if cas == 'cpf1':
            print('cpf1 not currently supported. Sorry.')
            # ref_pams_for, ref_pams_rev = crisprtools.find_spec_pams(cas, ref_seq, orient='5prime')
            # alt_pams_for, alt_pams_rev = crisprtools.find_spec_pams(cas, alt_seq, orient='5prime')
        else:
            ref_pams_for, ref_pams_rev = crisprtools.find_spec_pams(cas, ref_seq)
            alt_pams_for, alt_pams_rev = crisprtools.find_spec_pams(cas, alt_seq)

        if len(alt_pams_for) - len(ref_pams_for) > 0 or len(alt_pams_rev) - len(ref_pams_rev) > 0:
            makes_pam[counter] = 1
    alt_pams_for = map(lambda x:x + pos - 11, alt_pams_for)
    alt_pams_rev = map(lambda x:x + pos - 11, alt_pams_rev)
    return bool(makes_pam), alt_pams_for, alt_pams_rev


def get_made_broke_pams(df, chrom, ref_genome, cas_list, guide_length):
    # df is gens

    starts = []
    stops = []
    refs = []
    alts = []
    grna_refs = []
    grna_alts = []
    variant_pos_in_guides = []
    cas_types = []
    chroms = []
    variants_positions = []
    strands = []
    pam_length = 3 # change this when do something other 
    df.columns = ['chromosome','variant_chromosomal_position','ref','alt','genotype','het']
    for index, row in df.iterrows():
        var = row['variant_chromosomal_position']
        for cas in cas_list:
            if cas in crisprtools.tpp_for.keys():
                pam_length = len(crisprtools.tpp_for[cas].replace('[atcg]','n'))
                made_pam, alt_pams_for, alt_pams_rev = makes_pam(row['chromosome'], row['variant_chromosomal_position'],
                row['ref'], row['alt'], ref_genome)
                alt_pams_for = map(lambda x:x + pam_length, alt_pams_for)
                alt_pams_rev = map(lambda x:x + pam_length, alt_pams_rev)
                if made_pam:
                    for pos in alt_pams_for:
                        starts.append(pos - guide_length)
                        stops.append(pos - 1)
                        ref_allele = row['ref']
                        refs.append(ref_allele)
                        alt_allele = row['alt']
                        alts.append(alt_allele)
                        grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pos, var, ref_allele, alt_allele, guide_length, ref_genome)
                        grna_refs.append(grna_ref_seq)
                        grna_alts.append(grna_alt_seq)
                        var_pos = pos + pam_length - 1 - var
                        variant_pos_in_guides.append(var_pos)
                        cas_types.append(cas)
                        chroms.append(chrom)
                        variants_positions.append(var)
                        strands.append('+')
# this has a bug - will fix later
                    for pos in alt_pams_rev:
                        start = pos - 1
                        starts.append(start)
                        stops.append(pos + guide_length)
                        ref_allele = row['ref']
                        refs.append(ref_allele)
                        alt_allele = row['alt']
                        alts.append(alt_allele)
                        grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pos, var, ref_allele, alt_allele, guide_length, ref_genome, strand='negative')
                        grna_refs.append(grna_ref_seq)
                        grna_alts.append(grna_alt_seq)
                        var_pos = var - start + pam_length
                        variant_pos_in_guides.append(var_pos)
                        cas_types.append(cas)
                        chroms.append(chrom)
                        variants_positions.append(var)
                        strands.append('-')
            elif cas in crisprtools.fpp_for.keys():
                print('cpf1 not supported yet. Sorry.')
                # pam_length = len(crisprtools.fpp_for[cas].replace('[atcg]','n'))
                # made_pam, alt_pams_for, alt_pams_rev = makes_breaks_pam(row['chromosome'], row['variant_chromosomal_position'],
                # row['ref'], row['alt'], ref_genome)
                # if made_pam:
                #     for pam in alt_pams_for:
                #         starts.append(pos - 1)
                #         stops.append(pos + guide_length)
                #         ref_allele = df.query('variant_chromosomal_position == @pos').ref.tolist()[0]
                #         refs.append(ref_allele)
                #         alt_allele = df.query('variant_chromosomal_position == @pos').alt.tolist()[0]
                #         alts.append(alt_allele)
                #         grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pos, var, ref_allele, alt_allele, guide_length, ref_genome, strand='negative')
                #         grna_refs.append(grna_ref_seq)
                #         grna_alts.append(grna_alt_seq)
                #         var_pos = var - pos + pam_length - 1
                #         variant_pos_in_guides.append(var_pos)
                #         cas_types.append(cas)
                #         chroms.append(chrom)
                #         variants_positions.append(var)
                #         strands.append('+')
                #     for pam in alt_pams_rev:
                #         starts.append(pos - guide_length)
                #         stops.append(pos - 1)
                #         ref_allele = df.query('variant_chromosomal_position == @pos').ref.tolist()[0]
                #         refs.append(ref_allele)
                #         alt_allele = df.query('variant_chromosomal_position == @pos').alt.tolist()[0]
                #         alts.append(alt_allele)
                #         grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pos, var, ref_allele, alt_allele, guide_length, ref_genome)
                #         grna_refs.append(grna_ref_seq)
                #         grna_alts.append(grna_alt_seq)
                #         var_pos = pos + pam_length - 1 - var
                #         variant_pos_in_guides.append(var_pos)
                #         cas_types.append(cas)
                #         chroms.append(chrom)
                #         variants_positions.append(var)
                #         strands.append('-')
            else:
                print('Something is wrong, exiting @ line 137.')
                exit()
        
    return starts, stops, refs, alts, grna_refs, grna_alts, variant_pos_in_guides, cas_types, chroms, variants_positions, strands


def get_alt_seq(chrom, pam_start, var_pos, ref, alt, guide_length, ref_genome, strand='positive'):

    if strand == 'positive':

        # reference sgRNA

        ref_seq = ref_genome['chr'+str(chrom)][pam_start - guide_length - 11:pam_start - 1]

        # alt sgRNA 

        alt_seq = ref_genome['chr'+str(chrom)][pam_start - guide_length - 11:var_pos - 1].lower() + alt.upper() + ref_genome['chr'+str(chrom)][var_pos + len(alt) - 1:pam_start - 1].lower()

        return ref_seq[-guide_length:].upper(), alt_seq[-guide_length:].upper()

    elif strand == 'negative':

        # reference sgRNA

        ref_seq = ref_genome['chr'+str(chrom)][pam_start:pam_start + guide_length + 11]

        # alt sgRNA 

        alt_seq = ref_genome['chr'+str(chrom)][pam_start:var_pos - 1].lower() + alt.upper() + ref_genome['chr'+str(chrom)][var_pos + len(alt) - 1:pam_start + guide_length + 11].lower()

        return ref_seq[:guide_length].upper(), alt_seq[:guide_length].upper()

    else:

        print ('Must specify strand, exiting at line 190.')

        exit()


def main(args):
    
    print(args)
    out_dir = args['<out_dir>']
    pams_dir = args['<pams_dir>']
    gens = args['<gens_file>']
    locus = args['<locus>']
    chrom = locus.split(':')[0]
    if chrom.startswith('chr'):
        chrom = chrom[3:]
    start,stop = locus.split(':')[1].split('-')
    start =int(start) - 50
    stop = int(stop) + 50
    ref_genome = Fasta(args['<ref_fasta>'], as_raw=True)
    global CAS_LIST
    CAS_LIST = list(args['<cas_types>'].split(','))
    guide_length = int(args['<guide_length>'])
    # targ_df = pd.read_hdf(args['<targ_file>'], where=f'pos <= {stop} and pos >= {start}')[['chrom','pos','ref','alt','id','af']]
    # targ_df.columns = ['chrom','variant_position','ref','alt','id','af']

    # load chromosome variants

    gens = pd.read_hdf(gens)#.query('pos <= @stop and pos >= @start').head(5) # remove the stop once finished testing
    gens['het'] = gens['genotype'].apply(het)
    gens = gens.query('het and pos <= @stop and pos >= @start')
    if gens.empty:
        print('No het variants in that region in this genome, exiting.')
        exit()
    # print(gens.head())

    chr_variants = set(gens.pos.tolist())
    print('There are ' + str(len(chr_variants)) + ' het variants in this locus in this genome.')
    # initialize dictionary to save locations of PAM proximal variants

    pam_prox_vars = {}

    # # initialize lists that will eventually become the output dataframe

    starts = []
    stops = []
    refs = []
    alts = []
    grna_refs = []
    grna_alts = []
    variant_pos_in_guides = []
    cas_types = []
    chroms = []
    variants_positions = []
    strands = []

    # # get variants within sgRNA region for 3 prime PAMs (guide_length bp upstream of for pos and vice versa)

    for cas in CAS_LIST:
        if cas in TP_CAS_LIST:
            print(f'Currently evaluating {cas}.')
            if cas in crisprtools.tpp_for.keys():
                pam_length = len(crisprtools.tpp_for[cas].replace('[atcg]','n'))
            else:
                print('Something is wrong, exiting @ line 216.')
            cas_prox_vars = []
            pam_for_pos = np.load(os.path.join(pams_dir, f'chr{chrom}_{cas}_pam_sites_for.npy')).tolist()
            pam_for_pos = list(filter(lambda x: x >= start and x <= stop, pam_for_pos))
            pam_rev_pos = np.load(os.path.join(pams_dir, f'chr{chrom}_{cas}_pam_sites_rev.npy')).tolist()
            pam_rev_pos = list(filter(lambda x: x >= start and x <= stop, pam_rev_pos))
            for pos in pam_for_pos:
                prox_vars = get_range_upstream(pos, pam_length, guide_length)# & chr_variants
                prox_vars_min = min(prox_vars)
                prox_vars_max = max(prox_vars)
                prox_var_df = gens.query('pos >= @prox_vars_min and pos <= @prox_vars_max')
                if prox_var_df.empty:
                    continue
                for index, row in prox_var_df.iterrows():
                    var = row['pos']
                    starts.append(pos - guide_length)
                    stops.append(pos - 1)
                    ref_allele = row['ref']
                    refs.append(ref_allele)
                    alt_allele = row['alt']
                    alts.append(alt_allele)
                    grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pos, var, ref_allele, alt_allele, guide_length, ref_genome)
                    grna_refs.append(grna_ref_seq)
                    grna_alts.append(grna_alt_seq)
                    var_pos = pos + pam_length - 1 - var
                    variant_pos_in_guides.append(var_pos)
                    cas_types.append(cas)
                    chroms.append(chrom)
                    variants_positions.append(var)
                    strands.append('+')
            for pos in pam_rev_pos:
                prox_vars = get_range_downstream(pos, pam_length, guide_length)# & chr_variants
                prox_vars_min = min(prox_vars)
                prox_vars_max = max(prox_vars)
                prox_var_df = gens.query('pos >= @prox_vars_min and pos <= @prox_vars_max')
                if prox_var_df.empty:
                    continue
                for index, row in prox_var_df.iterrows():
                    var = row['pos']
                    start = pos - 1
                    starts.append(start)
                    stops.append(pos + guide_length)
                    ref_allele = row['ref']
                    refs.append(ref_allele)
                    alt_allele = row['alt']
                    alts.append(alt_allele)
                    grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pos, var, ref_allele, alt_allele, guide_length, ref_genome, strand='negative')
                    grna_refs.append(grna_ref_seq)
                    grna_alts.append(grna_alt_seq)
                    var_pos = var - start + pam_length
                    variant_pos_in_guides.append(var_pos)
                    cas_types.append(cas)
                    chroms.append(chrom)
                    variants_positions.append(var)
                    strands.append('-')

    # # same for five prime pams
        elif cas in crisprtools.fpp_for.keys():
            print('cpf1 not supported yet. Sorry.')
        else:
            print(f'Something is wrong. Exiting at line 367.')
            exit()
    # for cas in FP_CAS_LIST:
    #     if cas not in CAS_LIST:
    #         continue
    #     else:
    #         print(cas)
    #         if cas in crisprtools.tpp_for.keys():
    #             pam_length = len(crisprtools.tpp_for[cas].replace('[atcg]','n'))
    #             #print(crisprtools.tpp_for[cas].replace('[atcg]','n'))
    #         elif cas in crisprtools.fpp_for.keys():
    #             pam_length = len(crisprtools.fpp_for[cas])
    #         else:
    #             print('Something is wrong, exiting @ line 216.')
    #         cas_prox_vars = []
    #         pam_for_pos = np.load(os.path.join(pams_dir, f'chr{chrom}_{cas}_pam_sites_for.npy')).tolist()
    #         pam_rev_pos = np.load(os.path.join(pams_dir, f'chr{chrom}_{cas}_pam_sites_rev.npy')).tolist()
    #         for pos in pam_for_pos:
    #             prox_vars = set(get_range_downstream(pos, pam_length, guide_length)) & chr_variants
    #             for var in prox_vars:
    #                 starts.append(pos - 1)
    #                 stops.append(pos + guide_length)
    #                 ref_allele = gens.query('pos == @var').ref.item()
    #                 refs.append(ref_allele)
    #                 alt_allele = gens.query('pos == @var').alt.item()
    #                 alts.append(alt_allele)
    #                 grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pos, var, ref_allele, alt_allele, guide_length, ref_genome, strand='negative')
    #                 grna_refs.append(grna_ref_seq)
    #                 grna_alts.append(grna_alt_seq)
    #                 var_pos = var - pos + pam_length - 1
    #                 variant_pos_in_guides.append(var_pos)
    #                 cas_types.append(cas)
    #                 chroms.append(chrom)
    #                 variants_positions.append(var)
    #                 strands.append('+')
    #         for pos in pam_rev_pos:
    #             prox_vars = set(get_range_upstream(pos, pam_length, guide_length)) & chr_variants
    #             for var in prox_vars:
    #                 starts.append(pos - guide_length)
    #                 stops.append(pos - 1)
    #                 ref_allele = gens.query('pos == @var').ref.item()
    #                 refs.append(ref_allele)
    #                 alt_allele = gens.query('pos == @var').alt.item()
    #                 alts.append(alt_allele)
    #                 grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pos, var, ref_allele, alt_allele, guide_length, ref_genome)
    #                 grna_refs.append(grna_ref_seq)
    #                 grna_alts.append(grna_alt_seq)
    #                 var_pos = pos + pam_length - 1 - var
    #                 variant_pos_in_guides.append(var_pos)
    #                 cas_types.append(cas)
    #                 chroms.append(chrom)
    #                 variants_positions.append(var)
    #                 strands.append('-')

    # get all variants that make a PAM and start output df

    starts_made, stops_made, refs_made, alts_made, grna_refs_made, grna_alts_made, \
    variant_pos_in_guides_made, cas_types_made, chroms_made, variants_positions_made, \
    strands_made = get_made_broke_pams(gens, chrom, ref_genome, CAS_LIST, guide_length)
    starts.extend(starts_made)
    stops.extend(stops_made)
    refs.extend(refs_made)
    alts.extend(alts_made)
    grna_refs.extend(grna_refs_made)
    grna_alts.extend(grna_alts_made)
    variant_pos_in_guides.extend(variant_pos_in_guides_made)
    cas_types.extend(cas_types_made)
    chroms.extend(chroms_made)
    variants_positions.extend(variants_positions_made)
    strands.extend(strands_made)

    out = pd.DataFrame({'chrom':chroms,'start':starts, 'stop':stops, 'ref':refs, 'alt':alts,
        'cas_type':cas_types, 'gRNA_ref':grna_refs, 'gRNA_alt':grna_alts, 'variant_position_in_guide':variant_pos_in_guides,
        'variant_position':variants_positions, 'strand': strands})
    # print(out.head())

    out = out.query('variant_position_in_guide >= 0')
    out.to_csv(out_dir + '_guides.tsv', sep='\t', index=False)
    print('Done.')


if __name__ == '__main__':
    arguments = docopt(__doc__, version=__version__)
    main(arguments)
